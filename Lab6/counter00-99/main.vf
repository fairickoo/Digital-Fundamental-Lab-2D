////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : main.vf
// /___/   /\     Timestamp : 10/05/2019 12:42:22
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/Users/pasaw/Desktop/2D/Digital-Fundamental-Lab-2D/Lab6/counter00-99/main.vf -w C:/Users/pasaw/Desktop/2D/Digital-Fundamental-Lab-2D/Lab6/counter00-99/main.sch
//Design Name: main
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module COMP4_HXILINX_main (EQ, A0, A1, A2, A3, B0, B1, B2, B3);
    

   output EQ;

   input A0;
   input A1;
   input A2;
   input A3;
   input B0;
   input B1;
   input B2;
   input B3;

   assign EQ = ((A0==B0) && (A1==B1) && (A2==B2) && (A3==B3)) ;

endmodule
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_main(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale  100 ps / 10 ps

module M2_1_HXILINX_main (O, D0, D1, S0);
    

   output O;

   input  D0;
   input  D1;
   input  S0;

   reg O;

   always @ ( D0 or D1 or S0)
   begin
      case(S0)
      1'b0 : O <= D0;
      1'b1 : O <= D1;
      endcase
   end
    
endmodule
`timescale 1ns / 1ps

module seven_segment_circuit_MUSER_main(A0, 
                                        A1, 
                                        A2, 
                                        A3, 
                                        a, 
                                        b, 
                                        c, 
                                        d, 
                                        e, 
                                        f, 
                                        g);

   (* LOC = "P58" *) 
    input A0;
   (* LOC = "P57" *) 
    input A1;
   (* LOC = "P56" *) 
    input A2;
   (* LOC = "P55" *) 
    input A3;
   (* LOC = "P41" *) 
   output a;
   (* LOC = "P40" *) 
   output b;
   (* LOC = "P35" *) 
   output c;
   (* LOC = "P34" *) 
   output d;
   (* LOC = "P32" *) 
   output e;
   (* LOC = "P29" *) 
   output f;
   (* LOC = "P27" *) 
   output g;
   
   wire XLXN_4;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_16;
   wire XLXN_21;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_27;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_31;
   
   OR2  XLXI_5 (.I0(XLXN_14), 
               .I1(XLXN_21), 
               .O(e));
   AND2  XLXI_10 (.I0(XLXN_13), 
                 .I1(XLXN_11), 
                 .O(XLXN_14));
   AND2  XLXI_11 (.I0(A0), 
                 .I1(A1), 
                 .O(XLXN_16));
   AND2  XLXI_12 (.I0(XLXN_13), 
                 .I1(XLXN_29), 
                 .O(XLXN_31));
   AND2  XLXI_13 (.I0(XLXN_13), 
                 .I1(A1), 
                 .O(XLXN_21));
   AND2  XLXI_14 (.I0(A1), 
                 .I1(XLXN_11), 
                 .O(XLXN_24));
   AND2  XLXI_15 (.I0(XLXN_28), 
                 .I1(A0), 
                 .O(XLXN_25));
   OR4  XLXI_16 (.I0(A1), 
                .I1(A3), 
                .I2(XLXN_14), 
                .I3(XLXN_4), 
                .O(a));
   OR4  XLXI_17 (.I0(A3), 
                .I1(XLXN_28), 
                .I2(XLXN_27), 
                .I3(XLXN_31), 
                .O(f));
   OR4  XLXI_18 (.I0(XLXN_24), 
                .I1(A3), 
                .I2(XLXN_28), 
                .I3(XLXN_21), 
                .O(g));
   OR3  XLXI_20 (.I0(A0), 
                .I1(XLXN_29), 
                .I2(A2), 
                .O(c));
   OR3  XLXI_21 (.I0(XLXN_31), 
                .I1(XLXN_11), 
                .I2(XLXN_16), 
                .O(b));
   OR5  XLXI_22 (.I0(XLXN_25), 
                .I1(XLXN_24), 
                .I2(XLXN_21), 
                .I3(XLXN_14), 
                .I4(A3), 
                .O(d));
   INV  XLXI_23 (.I(A3), 
                .O(XLXN_10));
   INV  XLXI_24 (.I(A2), 
                .O(XLXN_11));
   INV  XLXI_25 (.I(A1), 
                .O(XLXN_29));
   INV  XLXI_26 (.I(A0), 
                .O(XLXN_13));
   AND2  XLXI_42 (.I0(XLXN_13), 
                 .I1(A2), 
                 .O(XLXN_27));
   AND2  XLXI_43 (.I0(A0), 
                 .I1(A2), 
                 .O(XLXN_4));
   AND2  XLXI_44 (.I0(XLXN_29), 
                 .I1(A2), 
                 .O(XLXN_28));
endmodule
`timescale 1ns / 1ps

module div5_MUSER_main(CLK_IN, 
                       CLK_OUT);

    input CLK_IN;
   output CLK_OUT;
   
   wire XLXN_2;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_12;
   wire XLXN_17;
   wire CLK_OUT_DUMMY;
   
   assign CLK_OUT = CLK_OUT_DUMMY;
   FDC  XLXI_1 (.C(CLK_IN), 
               .CLR(XLXN_17), 
               .D(XLXN_8), 
               .Q(XLXN_12));
   INV  XLXI_4 (.I(XLXN_12), 
               .O(XLXN_8));
   FDC  XLXI_5 (.C(XLXN_8), 
               .CLR(XLXN_17), 
               .D(XLXN_9), 
               .Q(XLXN_2));
   INV  XLXI_6 (.I(XLXN_2), 
               .O(XLXN_9));
   FDC  XLXI_7 (.C(XLXN_9), 
               .CLR(XLXN_17), 
               .D(XLXN_10), 
               .Q(CLK_OUT_DUMMY));
   INV  XLXI_8 (.I(CLK_OUT_DUMMY), 
               .O(XLXN_10));
   AND2  XLXI_15 (.I0(CLK_OUT_DUMMY), 
                 .I1(XLXN_12), 
                 .O(XLXN_17));
endmodule
`timescale 1ns / 1ps

module devider2_MUSER_main(CLK_IN, 
                           CLK_OUT);

    input CLK_IN;
   output CLK_OUT;
   
   wire XLXN_4;
   wire CLK_OUT_DUMMY;
   
   assign CLK_OUT = CLK_OUT_DUMMY;
   FD #( .INIT(1'b0) ) XLXI_1 (.C(CLK_IN), 
              .D(XLXN_4), 
              .Q(CLK_OUT_DUMMY));
   INV  XLXI_3 (.I(CLK_OUT_DUMMY), 
               .O(XLXN_4));
endmodule
`timescale 1ns / 1ps

module div10_MUSER_main(CLK_IN, 
                        CLK_OUT);

    input CLK_IN;
   output CLK_OUT;
   
   wire XLXN_2;
   
   devider2_MUSER_main  XLXI_1 (.CLK_IN(CLK_IN), 
                               .CLK_OUT(XLXN_2));
   div5_MUSER_main  XLXI_2 (.CLK_IN(XLXN_2), 
                           .CLK_OUT(CLK_OUT));
endmodule
`timescale 1ns / 1ps

module CLK_DIV_MUSER_main(CLK_IN, 
                          CLK_OUT);

    input CLK_IN;
   output CLK_OUT;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   
   devider2_MUSER_main  XLXI_1 (.CLK_IN(CLK_IN), 
                               .CLK_OUT(XLXN_1));
   div10_MUSER_main  XLXI_2 (.CLK_IN(XLXN_1), 
                            .CLK_OUT(XLXN_2));
   div10_MUSER_main  XLXI_3 (.CLK_IN(XLXN_2), 
                            .CLK_OUT(XLXN_3));
   div10_MUSER_main  XLXI_4 (.CLK_IN(XLXN_3), 
                            .CLK_OUT(XLXN_4));
   div10_MUSER_main  XLXI_5 (.CLK_IN(XLXN_4), 
                            .CLK_OUT(XLXN_5));
   div10_MUSER_main  XLXI_8 (.CLK_IN(XLXN_5), 
                            .CLK_OUT(CLK_OUT));
endmodule
`timescale 1ns / 1ps

module ct_MUSER_main(CLK, 
                     CLR, 
                     A_0, 
                     A_1, 
                     A_2, 
                     A_3, 
                     B_0, 
                     B_1, 
                     B_2, 
                     B_3);

    input CLK;
    input CLR;
   output A_0;
   output A_1;
   output A_2;
   output A_3;
   output B_0;
   output B_1;
   output B_2;
   output B_3;
   
   wire XLXN_1;
   wire XLXN_16;
   wire XLXN_17;
   
   VCC  XLXI_1 (.P(XLXN_1));
   (* HU_SET = "XLXI_5_7" *) 
   CD4CE_HXILINX_main  XLXI_5 (.C(CLK), 
                              .CE(XLXN_1), 
                              .CLR(CLR), 
                              .CEO(XLXN_17), 
                              .Q0(A_0), 
                              .Q1(A_1), 
                              .Q2(A_2), 
                              .Q3(A_3), 
                              .TC());
   (* HU_SET = "XLXI_6_8" *) 
   CD4CE_HXILINX_main  XLXI_6 (.C(XLXN_17), 
                              .CE(XLXN_1), 
                              .CLR(XLXN_16), 
                              .CEO(), 
                              .Q0(B_0), 
                              .Q1(B_1), 
                              .Q2(B_2), 
                              .Q3(B_3), 
                              .TC());
endmodule
`timescale 1ns / 1ps

module main(OSC, 
            PB_3, 
            XLXN_66, 
            XLXN_67, 
            XLXN_68, 
            XLXN_69, 
            XLXN_70, 
            XLXN_71, 
            XLXN_72, 
            XLXN_73, 
            XLXN_101, 
            XLXN_102, 
            XLXN_103, 
            XLXN_104, 
            XLXN_105, 
            XLXN_106, 
            XLXN_107, 
            XLXN_108, 
            XLXN_109, 
            XLXN_116);

   (* LOC = "P123" *) 
    input OSC;
   (* LOC = "P47" *) 
    input PB_3;
   (* LOC = "P82" *) 
   output XLXN_66;
   (* LOC = "P81" *) 
   output XLXN_67;
   (* LOC = "P80" *) 
   output XLXN_68;
   (* LOC = "P79" *) 
   output XLXN_69;
   (* LOC = "P78" *) 
   output XLXN_70;
   (* LOC = "P75" *) 
   output XLXN_71;
   (* LOC = "P74" *) 
   output XLXN_72;
   (* LOC = "P67" *) 
   output XLXN_73;
   (* LOC = "P41" *) 
   output XLXN_101;
   (* LOC = "P40" *) 
   output XLXN_102;
   (* LOC = "P35" *) 
   output XLXN_103;
   (* LOC = "P34" *) 
   output XLXN_104;
   (* LOC = "P32" *) 
   output XLXN_105;
   (* LOC = "P29" *) 
   output XLXN_106;
   (* LOC = "P27" *) 
   output XLXN_107;
   (* LOC = "P44" *) 
   output XLXN_108;
   (* LOC = "P43" *) 
   output XLXN_109;
   (* LOC = "P83" *) 
   output XLXN_116;
   
   wire XLXN_64;
   wire XLXN_76;
   wire XLXN_97;
   wire XLXN_98;
   wire XLXN_99;
   wire XLXN_100;
   wire XLXN_112;
   wire XLXN_115;
   wire XLXN_66_DUMMY;
   wire XLXN_67_DUMMY;
   wire XLXN_68_DUMMY;
   wire XLXN_69_DUMMY;
   wire XLXN_70_DUMMY;
   wire XLXN_71_DUMMY;
   wire XLXN_72_DUMMY;
   wire XLXN_73_DUMMY;
   wire XLXN_108_DUMMY;
   
   assign XLXN_66 = XLXN_66_DUMMY;
   assign XLXN_67 = XLXN_67_DUMMY;
   assign XLXN_68 = XLXN_68_DUMMY;
   assign XLXN_69 = XLXN_69_DUMMY;
   assign XLXN_70 = XLXN_70_DUMMY;
   assign XLXN_71 = XLXN_71_DUMMY;
   assign XLXN_72 = XLXN_72_DUMMY;
   assign XLXN_73 = XLXN_73_DUMMY;
   assign XLXN_108 = XLXN_108_DUMMY;
   ct_MUSER_main  XLXI_25 (.CLK(XLXN_64), 
                          .CLR(XLXN_76), 
                          .A_0(XLXN_66_DUMMY), 
                          .A_1(XLXN_67_DUMMY), 
                          .A_2(XLXN_68_DUMMY), 
                          .A_3(XLXN_69_DUMMY), 
                          .B_0(XLXN_70_DUMMY), 
                          .B_1(XLXN_71_DUMMY), 
                          .B_2(XLXN_72_DUMMY), 
                          .B_3(XLXN_73_DUMMY));
   CLK_DIV_MUSER_main  XLXI_26 (.CLK_IN(OSC), 
                               .CLK_OUT(XLXN_108_DUMMY));
   AND2  XLXI_28 (.I0(PB_3), 
                 .I1(XLXN_108_DUMMY), 
                 .O(XLXN_64));
   GND  XLXI_29 (.G(XLXN_76));
   (* HU_SET = "XLXI_38_9" *) 
   M2_1_HXILINX_main  XLXI_38 (.D0(XLXN_66_DUMMY), 
                              .D1(XLXN_70_DUMMY), 
                              .S0(XLXN_108_DUMMY), 
                              .O(XLXN_97));
   (* HU_SET = "XLXI_39_10" *) 
   M2_1_HXILINX_main  XLXI_39 (.D0(XLXN_67_DUMMY), 
                              .D1(XLXN_71_DUMMY), 
                              .S0(XLXN_108_DUMMY), 
                              .O(XLXN_98));
   (* HU_SET = "XLXI_40_11" *) 
   M2_1_HXILINX_main  XLXI_40 (.D0(XLXN_68_DUMMY), 
                              .D1(XLXN_72_DUMMY), 
                              .S0(XLXN_108_DUMMY), 
                              .O(XLXN_99));
   (* HU_SET = "XLXI_41_12" *) 
   M2_1_HXILINX_main  XLXI_41 (.D0(XLXN_69_DUMMY), 
                              .D1(XLXN_73_DUMMY), 
                              .S0(XLXN_108_DUMMY), 
                              .O(XLXN_100));
   seven_segment_circuit_MUSER_main  XLXI_42 (.A0(XLXN_97), 
                                             .A1(XLXN_98), 
                                             .A2(XLXN_99), 
                                             .A3(XLXN_100), 
                                             .a(XLXN_101), 
                                             .b(XLXN_102), 
                                             .c(XLXN_103), 
                                             .d(XLXN_104), 
                                             .e(XLXN_105), 
                                             .f(XLXN_106), 
                                             .g(XLXN_107));
   INV  XLXI_43 (.I(XLXN_108_DUMMY), 
                .O(XLXN_109));
   (* HU_SET = "XLXI_44_13" *) 
   COMP4_HXILINX_main  XLXI_44 (.A0(XLXN_66_DUMMY), 
                               .A1(XLXN_67_DUMMY), 
                               .A2(XLXN_68_DUMMY), 
                               .A3(XLXN_69_DUMMY), 
                               .B0(XLXN_70_DUMMY), 
                               .B1(XLXN_71_DUMMY), 
                               .B2(XLXN_72_DUMMY), 
                               .B3(XLXN_73_DUMMY), 
                               .EQ(XLXN_112));
   AND2  XLXI_45 (.I0(XLXN_115), 
                 .I1(XLXN_112), 
                 .O(XLXN_116));
   INV  XLXI_46 (.I(PB_3), 
                .O(XLXN_115));
endmodule
